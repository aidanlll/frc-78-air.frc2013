// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc78.FRC2013.subsystems;
import org.usfirst.frc78.FRC2013.RobotMap;
import org.usfirst.frc78.FRC2013.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc78.FRC2013.Robot;
/**
 *
 */
public class Shooter extends Subsystem {
    private final static double FRONT_SHOOT_SPEED = 1.0;    // TODO
    private final static double REAR_SHOOT_SPEED = 0.75;    // TODO
    private final static double TRIGGER_FIRE_POS = 180.0;    // TODO
    private final static double TRIGGER_COCK_POS = 0.0;    // TODO
    private final static double TILT_LOAD_POS = 0.0;    // TODO
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController frontMotor = RobotMap.shooterFrontMotor;
    Encoder frontEncoder = RobotMap.shooterFrontEncoder;
    PIDController frontPID = RobotMap.shooterFrontPID;
    SpeedController rearMotor = RobotMap.shooterRearMotor;
    Encoder rearEncoder = RobotMap.shooterRearEncoder;
    PIDController rearPID = RobotMap.shooterRearPID;
    SpeedController triggerMotor = RobotMap.shooterTriggerMotor;
    Encoder triggerEncoder = RobotMap.shooterTriggerEncoder;
    PIDController triggerPID = RobotMap.shooterTriggerPID;
    SpeedController tiltMotor = RobotMap.shooterTiltMotor;
    Encoder tiltEncoder = RobotMap.shooterTiltEncoder;
    PIDController tiltPID = RobotMap.shooterTiltPID;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new TiltWithJoystick());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public boolean isShooterAtSpeed() {
        if (frontPID.onTarget() && rearPID.onTarget()) {
            return true;
        }
        return false;
    }
    public void stopShooterWheels() {
        frontPID.reset();
        rearPID.reset();
    }
    public void startShooterWheels() {
        frontPID.enable();
        rearPID.enable();
        frontPID.setSetpoint(FRONT_SHOOT_SPEED);
        rearPID.setSetpoint(REAR_SHOOT_SPEED);
    }
    // tilt
    public void stopTiltMotor() {
        tiltMotor.set(0.0);
        tiltPID.reset();
        double angle = tiltEncoder.getDistance();
        tiltPID.setSetpoint(angle);
        tiltPID.enable();
    }
    public void stopTiltPID() {
        tiltPID.reset();
    }
    public void joystickTilt() {
        tiltMotor.set(Robot.oi.getShooterTiltSpeed());
    }
    public boolean isTiltOnTarget() {
        return tiltPID.onTarget();
    }
    public void moveTiltToLoadPosition() {
        tiltPID.setSetpoint(TILT_LOAD_POS);
    }
    // trigger
    public boolean isTrigDone() {
        return triggerPID.onTarget();
    }
    public void moveTrigToFirePos() {
        triggerPID.setSetpoint(TRIGGER_FIRE_POS);
    }
    public void moveTrigToCockPos() {
        triggerPID.setSetpoint(TRIGGER_COCK_POS);
    }
}
