// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc78.FRC2013.subsystems;
import org.usfirst.frc78.FRC2013.RobotMap;
import org.usfirst.frc78.FRC2013.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.Subsystem;
/**
 *
 */
public class Shooter extends Subsystem {
    private final static double TRIGGER_SPEED = 1.0;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController frontMotor = RobotMap.shooterFrontMotor;
    Encoder frontEncoder = RobotMap.shooterFrontEncoder;
    PIDController frontPID = RobotMap.shooterFrontPID;
    SpeedController rearMotor = RobotMap.shooterRearMotor;
    Encoder rearEncoder = RobotMap.shooterRearEncoder;
    PIDController rearPID = RobotMap.shooterRearPID;
    SpeedController triggerMotor = RobotMap.shooterTriggerMotor;
    DigitalInput triggerStopSw = RobotMap.shooterTriggerStopSw;
    DigitalInput chamberedSw = RobotMap.shooterChamberedSw;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public Shooter() {
        frontPID.disable();
        rearPID.disable();
    }
    public void initialize() {
        frontPID.reset();
        rearPID.reset();
        frontPID.enable();
        rearPID.enable();
    }
    public boolean isFrisbeeChambered() {
        return chamberedSw.get();
    }
    public boolean isTriggerDone() {
        return triggerStopSw.get();
    }
    public void stopTriggerMotor() {
        triggerMotor.set(0.0);
    }
    public void startTriggerMotor() {
        triggerMotor.set(TRIGGER_SPEED);
    }
}
