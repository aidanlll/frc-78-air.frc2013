// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc78.FRC2013.subsystems;
import org.usfirst.frc78.FRC2013.RobotMap;
import org.usfirst.frc78.FRC2013.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc78.FRC2013.Robot;
/**
 *
 */
public class Tilt extends PIDSubsystem {
    private final static double TILT_MAX_POS   = 4.039;         //3.895
    private final static double TILT_MIN_POS   = 1.0;//0.560;         //0.834
//    private final static double TILT_LO_POS   = TILT_MAX_POS;
//    private final static double TILT_HI_POS   = TILT_MIN_POS;
//    private final static double TILT_START_POS = 3.6;
//    private final static double TILT_LOAD_POS = 3.6;
//    private final static double TILT_2PT_CLOSE_POS = 3.6;
//    private final static double TILT_3PT_CLOSE_POS = 3.6;
//    private final static double TILT_2PT_FAR_POS = 3.6;
//    private final static double TILT_3PT_FAR_POS = 3.6;
//    private final static double TILT_5PT_POS = 3.6;
//    private final static double TILT_ON_TARGET = 2.0;
//    private final static double TILT_RESOLUTION = 1.0;
//    private final static double TILT_KP = 1.0/(TILT_MAX_POS-TILT_MIN_POS);
    
    // private
    private double m_drGoal = 0.0;
    private double m_drPos = 0.0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController motor = RobotMap.tiltMotor;
    AnalogChannel anglePot = RobotMap.tiltAnglePot;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Initialize your subsystem here
    public Tilt() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Tilt", -0.35, -0.025, 0.0);
        setAbsoluteTolerance(0.1);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Tilt", "PIDSubsystem Controller", getPIDController());
        getPIDController().setOutputRange(-1.0, 1.0);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
        getPIDController().setInputRange(TILT_MIN_POS, TILT_MAX_POS);
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new TiltWithJoystick());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return anglePot.getAverageVoltage();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
        SmartDashboard.putNumber("TiltMotorPos", anglePot.getAverageVoltage());
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        motor.pidWrite(output);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    public void enablePID() {
        enable();
    }
    public void disablePID() {
        disable();
    }
    public void JoystickDrive() {
        disable();
        double speed = -Robot.oi.getShooterTiltSpeed();
        if (0.05 > Math.abs(speed)) {
            speed = 0.0;
        }
        if (TILT_MIN_POS > anglePot.getAverageVoltage() &&  0.0 < speed) {
            speed = 0.0;
        } else if (TILT_MAX_POS < anglePot.getAverageVoltage() &&  0.0 > speed) {
            speed = 0.0;
        }
        motor.set(speed);
    }
}
