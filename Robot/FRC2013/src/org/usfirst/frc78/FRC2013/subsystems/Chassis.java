// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc78.FRC2013.subsystems;
import org.usfirst.frc78.FRC2013.RobotMap;
import org.usfirst.frc78.FRC2013.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc78.FRC2013.Robot;
/**
 *
 */
public class Chassis extends Subsystem {
    // constants
    private final boolean SQUARE_INPUT_TRUE = true;
    private final double GYRO_SENSITIVITY = 0.007;
    private final double GYRO_P = 1.0;
    private final double GYRO_I = 0.0;
    private final double GYRO_D = 0.0;
    // private members
    private boolean m_bFlipDirection = false;
    private double m_drLastLeft = 0.0;
    private double m_drLastRight = 0.0;
    private double m_drDesPos = 0.0;
    private double m_drDesAngle = 0.0;
    private double m_drDesVel = 0.0;
    private double m_drDesW   = 0.0;
    private double m_drActPos = 0.0;
    private double m_drActAngle = 0.0;
    private double m_drActVel = 0.0;
    private double m_drActW   = 0.0;
    
    PIDController m_cTurnPID;
    PIDSource m_drTurnFeedback;
    PIDOutput m_drTurnCommand;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftMotor = RobotMap.chassisLeftMotor;
    SpeedController rightMotor = RobotMap.chassisRightMotor;
    RobotDrive drive = RobotMap.chassisDrive;
    Encoder leftEncoder = RobotMap.chassisLeftEncoder;
    Encoder rightEncoder = RobotMap.chassisRightEncoder;
    Gyro headingGyro = RobotMap.chassisHeadingGyro;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        setDefaultCommand(new DriveWithJoystick());
    }
    // initializer
    public Chassis() {
        headingGyro.setSensitivity(GYRO_SENSITIVITY);
        m_cTurnPID = new PIDController(GYRO_P, GYRO_I, GYRO_D, m_drTurnFeedback, m_drTurnCommand);
    }
    /** init()
     */
    public void init() {
        headingGyro.reset();
        m_cTurnPID.enable();
    }
    public void flipDriveDirection() {
	m_bFlipDirection = !m_bFlipDirection;
    }
    public void stop() {
        drive.stopMotor();
    }
    void tankDrive(double drLeft, double drRight) {
        drive.tankDrive(drLeft, drRight, SQUARE_INPUT_TRUE);
        m_drLastLeft = drLeft; m_drLastRight = drRight;
    }
    public void joystickDrive() {
        double drLSpeed = Robot.oi.getDriverLeftSpeed();
        double drRSpeed = Robot.oi.getDriverRightSpeed();
        if (m_bFlipDirection) {
            double drTemp = drLSpeed;
            drLSpeed = -drRSpeed;
            drRSpeed = -drTemp;
        }
        if (Robot.oi.isDriverGoSlow()) {
            drLSpeed *= 0.4;
            drRSpeed *= 0.4;
        }
        tankDrive(drLSpeed, drRSpeed);
    }
    // functions for autonomous use
    void arcadeDrive(double forward, double turn) {
        drive.arcadeDrive(forward, turn);
    }
    protected double returnPIDInput() {
        return m_drActAngle;
    }
    protected void usePIDOutput(double output) {        
        arcadeDrive(0.0, output);
    }
    boolean isStopped() {
        boolean bStatus = false;
        // TODO magic numbers
        if (0.1 > Math.abs(m_drActVel) && 0.1 > Math.abs(m_drActW)) {
            bStatus = true;
            //TODO reset encoders and gyro since we are stopped?
        }
        return bStatus;
    }
    double getCurDist() {
        return m_drActPos;
    }
    void goStraight(double dist) {
        m_drDesPos = dist;
        m_drActPos = 0.0;
    }
    double getCurAngle() {
        return m_drActAngle;
    }
    void turnAngle(double angle) {
        m_drDesAngle = angle;
        m_drActAngle = 0.0;
    }
}
