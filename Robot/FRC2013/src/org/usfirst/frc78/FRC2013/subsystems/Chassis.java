// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc78.FRC2013.subsystems;
import org.usfirst.frc78.FRC2013.RobotMap;
import org.usfirst.frc78.FRC2013.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc78.FRC2013.Robot;
/**
 * 6 inch wheels, 
 * 250 cycle/rev encoders, 
 * 1 gearbox out rev for 1 encoder rev, 
 * 42 teeth gearbox output gear 39 teeth wheel gear
 */
public class Chassis extends Subsystem {
    // constants
    private final boolean SQUARE_INPUT_TRUE = true;
    private final double RAMP_DIST = 1.5;           // feet
    private final double STOP_DIST = 0.1;
    private final double MAX_SPEED = 0.7;
    private final double MOVE_KP = (MAX_SPEED/RAMP_DIST);
    private final double MOVE_DONE = 0.2;               // feet
    private final int BRAKE_COUNT_MAX = 3;
    private final double RAMP_ANGLE = 10.0;
    private final double MAX_W = 0.6;
    private final double ANGLE_KP = ((MAX_W/RAMP_ANGLE));
    private final double ANGLE_DONE = 2.0;
    // private members
    private boolean m_bFlipDirection = false;
    private boolean m_bSlowSpeed = false;
    private double m_drDistance = 0.0;
    private double m_drAngle = 0.0;
    private int m_iBrakeCounter = 0;
    public double m_drMoveKP = MOVE_KP;
    public double m_drTurnKP = ANGLE_KP;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder leftEncoder = RobotMap.chassisLeftEncoder;
    Encoder rightEncoder = RobotMap.chassisRightEncoder;
    Gyro headingGyro = RobotMap.chassisHeadingGyro;
    SpeedController lFmotor = RobotMap.chassisLFmotor;
    SpeedController lRmotor = RobotMap.chassisLRmotor;
    SpeedController rFmotor = RobotMap.chassisRFmotor;
    SpeedController rRmotor = RobotMap.chassisRRmotor;
    RobotDrive drive = RobotMap.chassisDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveWithJoystick());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        SmartDashboard.putNumber("ChassisMoveKP", m_drMoveKP);
        SmartDashboard.putNumber("ChassisTurnKP", m_drTurnKP);
    }
    public void setFastSpeed() {
        m_bSlowSpeed = false;
    }
    public void setSlowSpeed() {
        m_bSlowSpeed = true;
    }
    public void init() {
        resetDistance();
        resetAngle();
        m_iBrakeCounter = 0;
    }
    public void stop() {
        drive.stopMotor();
        m_drDistance = 0.0;
        m_drAngle = 0.0;
        init();
    }
    void tankDrive(double left, double right) {
        drive.tankDrive(left, right, SQUARE_INPUT_TRUE);
//        drive.tankDrive(1.0, 1.0);
    }
    public void joystickDrive() {
        double lSpeed = Robot.oi.getDriverLeftSpeed();
        double rSpeed = Robot.oi.getDriverRightSpeed();
//        if (Robot.oi.isDriverGoSlow()) {
//            lSpeed *= 0.4;
//            rSpeed *= 0.4;
//        }
        tankDrive(lSpeed, rSpeed);
    }
    // autonomous
    public void resetDistance() {
        leftEncoder.reset();
        rightEncoder.reset();
    }
    public double getDistance() {
        return (leftEncoder.getDistance()+rightEncoder.getDistance())/2.0;
    }
    public void setDistance(double distance) {
        m_drDistance = distance;
    }
    public void resetAngle() {
        headingGyro.reset();
    }
    public double getAngle() {
        return -headingGyro.getAngle();
    }
    public void setAngle(double angle) {
        m_drAngle = angle;
    }
    public boolean onTarget() {
        SmartDashboard.putNumber("ChassisPos", getDistance());
        SmartDashboard.putNumber("ChassisAngle", getAngle());
        double d_error = m_drDistance - getDistance();
        double a_error = m_drAngle - getAngle();
//        if (ANGLE_DONE >= Math.abs(a_error)) {
//        if (MOVE_DONE >= Math.abs(d_error)) {
        if (MOVE_DONE >= Math.abs(d_error) &&
                ANGLE_DONE >= Math.abs(a_error)) {
            return true;
        }
        return false;
    }
    private void arcadeDrive(double forward, double turn) {
        drive.arcadeDrive(forward, turn);
    }
    public void move() {
        double d_speed = 0.0;
        double a_speed = 0.0;
        
        SmartDashboard.getNumber("ChassisMoveKP", m_drMoveKP);
        SmartDashboard.getNumber("ChassisTurnKP", m_drTurnKP);
        double a_error = m_drAngle - getAngle();
        if (RAMP_ANGLE < Math.abs(a_error)) {
            a_speed = MAX_W;
            a_speed *= (0.0 < a_error) ? 1.0 : -1.0;
        } else {
            a_speed = ANGLE_KP * a_error;
        }
        double d_error = m_drDistance - getDistance();
        if (RAMP_DIST < Math.abs(d_error)) {
            d_speed = MAX_SPEED;
            d_speed *= (0.0 < d_error) ? 1.0 : -1.0;
        } else {
            d_speed = MOVE_KP * d_error;
        }
/*
        // if braking needed (ugly but may work)
        if (BRAKE_COUNT_MAX > m_iBrakeCounter) {
            if (STOP_DIST > Math.abs(d_error)) {
                m_iBrakeCounter += 1;
                d_speed *= -1.0;
            }
        } else {
            m_drDistance = getDistance();
            d_speed = 0.0;
            a_speed = 0.0;
        }
*/
        arcadeDrive(d_speed, a_speed);
    }
}
