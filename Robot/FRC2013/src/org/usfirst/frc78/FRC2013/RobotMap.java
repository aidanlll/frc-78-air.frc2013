// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc78.FRC2013;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController chassisLeftMotor;
    public static SpeedController chassisRightMotor;
    public static RobotDrive chassisDrive;
    public static Encoder chassisLeftEncoder;
    public static Encoder chassisRightEncoder;
    public static Gyro chassisHeadingGyro;
    public static DigitalInput tiltcwLimit;
    public static DigitalInput tiltccwLimit;
    public static SpeedController tiltMotor;
    public static AnalogChannel tiltAnglePot;
    public static PIDController tiltMovePID;
    public static SpeedController shooterFrontMotor;
    public static Encoder shooterFrontEncoder;
    public static PIDController shooterFrontPID;
    public static SpeedController shooterRearMotor;
    public static Encoder shooterRearEncoder;
    public static PIDController shooterRearPID;
    public static SpeedController shooterTriggerMotor;
    public static DigitalInput shooterTriggerStopSw;
    public static DigitalInput shooterChamberedSw;
    public static Servo stackerLowerGateLeft;
    public static Servo stackerLowerGateRight;
    public static Servo stackerUpperGateLeft;
    public static Servo stackerUpperGateRight;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassisLeftMotor = new Victor(1, 1);
	LiveWindow.addActuator("Chassis", "LeftMotor", (Victor) chassisLeftMotor);
        
        chassisRightMotor = new Victor(1, 2);
	LiveWindow.addActuator("Chassis", "RightMotor", (Victor) chassisRightMotor);
        
        chassisDrive = new RobotDrive(chassisLeftMotor, chassisRightMotor);
	
        chassisDrive.setSafetyEnabled(true);
        chassisDrive.setExpiration(0.1);
        chassisDrive.setSensitivity(0.5);
        chassisDrive.setMaxOutput(1.0);
        
        chassisLeftEncoder = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
	LiveWindow.addSensor("Chassis", "LeftEncoder", chassisLeftEncoder);
        chassisLeftEncoder.setDistancePerPulse(1.0);
        chassisLeftEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        chassisLeftEncoder.start();
        chassisRightEncoder = new Encoder(1, 3, 1, 4, false, EncodingType.k4X);
	LiveWindow.addSensor("Chassis", "RightEncoder", chassisRightEncoder);
        chassisRightEncoder.setDistancePerPulse(1.0);
        chassisRightEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        chassisRightEncoder.start();
        chassisHeadingGyro = new Gyro(1, 1);
	LiveWindow.addSensor("Chassis", "HeadingGyro", chassisHeadingGyro);
        chassisHeadingGyro.setSensitivity(1.25);
        tiltcwLimit = new DigitalInput(1, 6);
	LiveWindow.addSensor("Tilt", "cwLimit", tiltcwLimit);
        
        tiltccwLimit = new DigitalInput(1, 7);
	LiveWindow.addSensor("Tilt", "ccwLimit", tiltccwLimit);
        
        tiltMotor = new Victor(1, 5);
	LiveWindow.addActuator("Tilt", "Motor", (Victor) tiltMotor);
        
        tiltAnglePot = new AnalogChannel(1, 2);
	LiveWindow.addSensor("Tilt", "AnglePot", tiltAnglePot);
        
        tiltMovePID = new PIDController(1.0, 0.0, 0.0, 0.0, tiltAnglePot, tiltMotor, 0.02);
	LiveWindow.addActuator("Tilt", "MovePID", tiltMovePID);
        tiltMovePID.setContinuous(false); tiltMovePID.setAbsoluteTolerance(0.2); 
        tiltMovePID.setOutputRange(-1.0, 1.0);        
        shooterFrontMotor = new Victor(1, 3);
	LiveWindow.addActuator("Shooter", "FrontMotor", (Victor) shooterFrontMotor);
        
        shooterFrontEncoder = new Encoder(1, 8, 1, 9, false, EncodingType.k4X);
	LiveWindow.addSensor("Shooter", "FrontEncoder", shooterFrontEncoder);
        shooterFrontEncoder.setDistancePerPulse(1.0);
        shooterFrontEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        shooterFrontEncoder.start();
        shooterFrontPID = new PIDController(1.0, 0.0, 0.0, 0.0, shooterFrontEncoder, shooterFrontMotor, 0.02);
	LiveWindow.addActuator("Shooter", "FrontPID", shooterFrontPID);
        shooterFrontPID.setContinuous(true); shooterFrontPID.setAbsoluteTolerance(0.2); 
        shooterFrontPID.setOutputRange(-1.0, 1.0);        
        shooterRearMotor = new Victor(1, 4);
	LiveWindow.addActuator("Shooter", "RearMotor", (Victor) shooterRearMotor);
        
        shooterRearEncoder = new Encoder(1, 10, 1, 11, false, EncodingType.k4X);
	LiveWindow.addSensor("Shooter", "RearEncoder", shooterRearEncoder);
        shooterRearEncoder.setDistancePerPulse(1.0);
        shooterRearEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        shooterRearEncoder.start();
        shooterRearPID = new PIDController(1.0, 0.0, 0.0, 0.0, shooterRearEncoder, shooterRearMotor, 0.02);
	LiveWindow.addActuator("Shooter", "RearPID", shooterRearPID);
        shooterRearPID.setContinuous(true); shooterRearPID.setAbsoluteTolerance(0.2); 
        shooterRearPID.setOutputRange(-1.0, 1.0);        
        shooterTriggerMotor = new Victor(1, 6);
	LiveWindow.addActuator("Shooter", "TriggerMotor", (Victor) shooterTriggerMotor);
        
        shooterTriggerStopSw = new DigitalInput(1, 12);
	LiveWindow.addSensor("Shooter", "TriggerStopSw", shooterTriggerStopSw);
        
        shooterChamberedSw = new DigitalInput(1, 5);
	LiveWindow.addSensor("Shooter", "ChamberedSw", shooterChamberedSw);
        
        stackerLowerGateLeft = new Servo(1, 7);
	LiveWindow.addActuator("Stacker", "LowerGateLeft", stackerLowerGateLeft);
        
        stackerLowerGateRight = new Servo(1, 8);
	LiveWindow.addActuator("Stacker", "LowerGateRight", stackerLowerGateRight);
        
        stackerUpperGateLeft = new Servo(1, 9);
	LiveWindow.addActuator("Stacker", "UpperGateLeft", stackerUpperGateLeft);
        
        stackerUpperGateRight = new Servo(1, 10);
	LiveWindow.addActuator("Stacker", "UpperGateRight", stackerUpperGateRight);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
